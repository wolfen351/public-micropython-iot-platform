stages:
  - test
  - build
  - package
  - deploy 
  - notify

variables:
  DOCKER_HOST: tcp://docker.ciya:2375
  # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
  DOCKER_TLS_CERTDIR: "/certs"
  CI_REG: gitlab.wolfen.za.net:5050  

test-syntax:
  image: micropython/unix:v1.18
  tags:
    - k3s
  script:
    micropython-dev main.py

build-packages:
  image: ubuntu:latest
  tags:
    - k3s
  stage: build
  script:
    - apt update
    - apt install git jq -y
    - chmod +x package.sh
    - ./package.sh
  artifacts:
    paths:
      - artifacts/*

build-docker-image:
  image: docker:19.03.1
  tags:
    - k3s
  variables:
    # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
    DOCKER_HOST: tcp://docker.ciya:2375
    DOCKER_TLS_CERTDIR: "/certs"
    CI_REG: gitlab.wolfen.za.net:5050
  stage: package
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REG
    - cd firmware-web
    - docker build --pull -t $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG

deploy:
  stage: deploy
  image:
    name: bitnami/kubectl:latest
    entrypoint: [""]
  tags:
    - k3s
  script:
  - cd firmware-web
  - kubectl config get-contexts
  - kubectl config use-context wolfen-personal/k3s-cluster-management:wolfen-personal-k3s
  - kubectl create namespace iot --dry-run=server && echo "iot namespace does not exist yet, creating it..." && kubectl create namespace iot
  - kubectl config set-context --current --namespace=iot
  - kubectl delete --ignore-not-found=true deployment.apps/firmware-wolfen-nz-host-deployment
  - kubectl apply $(ls *.yaml | awk ' { print " -f " $1 } ')
  - kubectl get deployment
  - kubectl get pod
  - kubectl get pv
  - kubectl get pvc
  - kubectl get service
  - kubectl get ingress

notify:
  stage: notify
  image: ubuntu:latest
  tags:
    - k3s
  script:
  - apt update -y 
  - apt install mosquitto mosquitto-clients -y
  - sleep 60
  - mosquitto_pub -h mqtt.wolfen.za.net -t iot-platform/version -m "6.0.$CI_PIPELINE_ID"
